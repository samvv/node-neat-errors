
export interface SourceLocation {
  file: string;
  line: number;
  column: number;
}

export interface ExprPath extends Array<string> {
  isConstructor: boolean;
}

export type Stack = StackFrame[];

export interface StackFrame {
  path: ExprPath;
  alias: string | null;
  location: SourceLocation | null;
}

/**
 * Provides information pointing to a location within a source.
 */
export interface SourcePosition {
  offset: number;
  line: number;
  column: number;
}

/**
 * The `start` and `end` position's of an object within the source.
 */
export interface SourceLocation {
  filename?: string;
  start: SourcePosition;
  end: SourcePosition;
}

/**
 * An object that can be used to make a generated parser trace it's progress.
 */
export interface Tracer {
  trace(
    event: {
    type: string;
    rule: string;
    result?: string;
    location: SourceLocation;
    }
  ): void;
}

export interface SyntaxError {
  name: string;
  message: string;
  stack?: string | any;
  expected?: Expectation;
  found?: string;
  location: SourceLocation;
}

export interface SyntaxError {
  new( message: string, expected: Expectation, found: string | null, location: SourceLocation ): SyntaxError;
  readonly prototype: SyntaxError;

  buildMessage( expected: Expectation, found?: string, location?: SourceLocation ): string;
}

interface SyntaxExpectation {
  type: string;
  description?: string;
  text?: string;
  parts?: string[];
  inverted?: boolean;
  ignoreCase?: boolean;
  expected?: SyntaxExpectation;
}

interface LiteralExpectation {
  type: "literal";
  text: string;
  ignoreCase: boolean;
}

interface ClassExpectation {
  type: "class";
  parts: string[];
  inverted: boolean;
  ignoreCase: boolean;
}

interface AnyExpectation {
  type: "any";
}

interface EndExpectation {
  type: "end";
}

interface OtherExpectation {
  type: "other";
  description: string;
}

interface NotExpectation {
  type: "not";
  expected: SyntaxExpectation;
}

type Expectation
  = LiteralExpectation
  | ClassExpectation
  | AnyExpectation
  | EndExpectation
  | OtherExpectation
  | NotExpectation
  | SyntaxExpectation;

/**
 * Default options that are shared by all generated parser's.
 */
export interface Options {
  [ key: string ]: any;
  filename?: string;
  startRule?: string;
  tracer?: Tracer;
}

/**
 * API for the parser generated by PEG.js
 */

export const DefaultTracer: Tracer | undefined;

export function parse(input: string, options?: Options): StackFrame;

